name: 4. Build Loop
run-name: Build Loop ${{ github.ref_name }}
on:
  workflow_dispatch:
  workflow_call:

  ## Remove the "#" sign from the beginning of the line below to get automated builds on push (code changes in your repository)
  #push:

env:
  UPSTREAM_REPO: LoopKit/LoopWorkspace
  UPSTREAM_BRANCH: main # upstream branch to sync from
  TARGET_BRANCH: main # branch on fork to build from
  SYNC_UPSTREAM: 'true' # set to 'false' or 'true' to disable / enable syncing of fork with upstream repository

jobs:
  secrets:
    name: Secrets
    uses: ./.github/workflows/validate_secrets.yml
    secrets: inherit

  upstream_sync_and_build:
    name: build
    needs: secrets
    runs-on: macos-12
    steps:
      # Uncomment to manually select latest Xcode if needed
      - name: Select Latest Xcode
        run: "sudo xcode-select --switch /Applications/Xcode_14.1.app/Contents/Developer"

      # Checks-out the repo
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ref: ${{ env.TARGET_BRANCH }}

      # Run the sync action
      - name: Sync upstream changes
        if: ${{ env.SYNC_UPSTREAM == 'true' }}
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          target_sync_branch: ${{ env.TARGET_BRANCH }}
          target_branch_checkout_args: --recurse-submodules
          shallow_since: 6 months ago
          # REQUIRED 'target_repo_token' exactly like this!
          target_repo_token: ${{ secrets.GH_PAT }}
          upstream_sync_branch: ${{ env.UPSTREAM_BRANCH }}
          upstream_sync_repo: ${{ env.UPSTREAM_REPO }}
          # upstream_repo_access_token: ${{ secrets.UPSTREAM_REPO_SECRET }}

      # Step 3: Display a sample message based on the sync output var 'has_new_commits'
      - name: New commits found
        if: steps.sync.outputs.has_new_commits == 'true'
        run: echo "New commits were found to sync."

      - name: No new commits
        if: steps.sync.outputs.has_new_commits == 'false'
        run: echo "There were no new commits."

      - name: Show value of 'has_new_commits'
        run: echo ${{ steps.sync.outputs.has_new_commits }}

      # Customize Loop: Download and apply patches
      - name: Customize Loop
        run: |

          # LoopWorkspace patches
          # -applies any patches located in the LoopWorkspace/patches/ directory
          if $(ls ./patches/* &> /dev/null); then
          git apply ./patches/* --allow-empty -v --whitespace=fix
          fi

          # For more information,
          #   see: https://loopkit.github.io/loopdocs/build/code_customization/
          # For each patch, edit comment line (keep the #)
          # then update curl line for username and SHA-1 (and remove the #)

          # LoopWorkspace patches:
          # LoopWorkspace: Filename: customization details
          #curl https://github.com/username/LoopWorkspace/commit/SHA-1.patch | git apply

          # Submodule Loop patches:
          # Loop: Filename: customization details
          #curl https://github.com/username/Loop/commit/SHA-1.patch | git apply --directory=Loop

          # Submodule LoopKit patches:
          # LoopKit: Filename: customization details
          #curl https://github.com/username/LoopKit/commit/SHA-1.patch | git apply --directory=LoopKit

          # Add patches for additional submodules using templates above,

      # Patch Fastlane Match to not print tables
      - name: Patch Match Tables
        run: find /usr/local/lib/ruby/gems -name table_printer.rb | xargs sed -i "" "/puts(Terminal::Table.new(params))/d"

      # Build signed Loop IPA file
      - name: Fastlane Build & Archive
        run: fastlane build_loop
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      # Upload to TestFlight
      - name: Fastlane upload to TestFlight
        run: fastlane release
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      # Upload IPA and Symbols
      - name: Upload IPA and Symbol artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            artifacts
            buildlog
