name: 4. Build Loop
run-name: Build Loop (${{ github.ref_name }})

on:
  workflow_dispatch:
  #push: # Uncomment this if you want to trigger on push
  schedule:
    - cron: "0 8 * * 3" # Checks for updates at 08:00 UTC every Wednesday
    - cron: "0 6 1 * *" # Builds the app on the 1st of every month at 06:00 UTC

env:
  UPSTREAM_REPO: LoopKit/LoopWorkspace
  UPSTREAM_BRANCH: ${{ github.ref_name }}
  TARGET_BRANCH: ${{ github.ref_name }}
  ALIVE_BRANCH_MAIN: alive-main
  ALIVE_BRANCH_DEV: alive-dev

jobs:
  build:
    runs-on: macos-14
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          submodules: recursive

      # Uninstall existing Bundler versions to avoid conflicts
      - name: Uninstall existing Bundler
        run: gem uninstall bundler -a -x || true

      # Install Bundler 2.4.19
      - name: Install Bundler 2.4.19
        run: gem install bundler -v 2.4.19

      # Verify Bundler version
      - name: Verify Bundler version
        run: bundler -v

      # Remove Gemfile.lock if it exists
      - name: Remove existing Gemfile.lock
        run: |
          if [ -f Gemfile.lock ]; then
            echo "Removing existing Gemfile.lock"
            rm Gemfile.lock
          else
            echo "No Gemfile.lock to remove"
          fi

      # Install project dependencies and regenerate Gemfile.lock using Bundler 2.4.19
      - name: Install Project Dependencies with Bundler 2.4.19
        run: bundle _2.4.19_ install --verbose

      # Display the contents of the regenerated Gemfile.lock to confirm it worked
      - name: Display Gemfile.lock
        run: cat Gemfile.lock

      # Select Xcode version (Update this if necessary)
      - name: Select Xcode version
        run: "sudo xcode-select --switch /Applications/Xcode_15.4.app/Contents/Developer"

      # Customize Loop: Download and apply patches
      - name: Customize Loop
        run: |
          if [ -d ./patches ]; then
            echo "Applying patches..."
            git apply ./patches/* --allow-empty -v --whitespace=fix
          else
            echo "No patches to apply."
          fi

      # Patch Fastlane Match to not print tables
      - name: Patch Match Tables
        run: |
          TABLE_PRINTER_PATH=$(ruby -e 'puts Gem::Specification.find_by_name("fastlane").gem_dir')/match/lib/match/table_printer.rb
          if [ -f "$TABLE_PRINTER_PATH" ]; then
            sed -i "" "/puts(Terminal::Table.new(params))/d" "$TABLE_PRINTER_PATH"
          else
            echo "table_printer.rb not found"
            exit 1
          fi

      # Update Provisioning Profiles using Fastlane
      - name: Update Provisioning Profiles
        run: bundle exec fastlane match appstore

      # Sync the GitHub runner clock with the Windows time server
      - name: Sync clock
        run: sudo sntp -sS time.windows.com

      # Build signed Loop IPA file using Fastlane
      - name: Fastlane Build & Archive
        run: bundle exec fastlane build_loop
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      # Upload to TestFlight
      - name: Fastlane upload to TestFlight
        run: bundle exec fastlane release
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      # Upload Build artifacts
      - name: Upload build log, IPA and Symbol artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            artifacts
            buildlog
