name: 1. Validate Secrets
run-name: Validate Secrets (${{ github.ref_name }})
on: [workflow_call, workflow_dispatch]

jobs:
  validate-access-token:
    name: Access
    runs-on: macos-14
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
      GH_TOKEN: ${{ secrets.GH_PAT }}
    outputs:
      HAS_WORKFLOW_PERMISSION: ${{ steps.access-token.outputs.has_workflow_permission }}
    steps:
      - name: Validate Access Token
        id: access-token
        run: |
          # Validate Access Token

          # Ensure that gh exit codes are handled when output is piped.
          set -o pipefail

          # Define patterns to validate the access token (GH_PAT) and distinguish between classic and fine-grained tokens.
          GH_PAT_CLASSIC_PATTERN='^ghp_[a-zA-Z0-9]{36}$'
          GH_PAT_FINE_GRAINED_PATTERN='^github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59}$'

          # Validate Access Token (GH_PAT)
          if [ -z "$GH_PAT" ]; then
            failed=true
            echo "::error::The GH_PAT secret is unset or empty. Set it and try again."
          else
            if [[ $GH_PAT =~ $GH_PAT_CLASSIC_PATTERN ]]; then
              provides_scopes=true
              echo "The GH_PAT secret is a structurally valid classic token."
            elif [[ $GH_PAT =~ $GH_PAT_FINE_GRAINED_PATTERN ]]; then
              echo "The GH_PAT secret is a structurally valid fine-grained token."
            else
              unknown_format=true
              echo "The GH_PAT secret does not have a known token format."
            fi
            
            # Attempt to capture the x-oauth-scopes scopes of the token.
            if ! scopes=$(curl -sS -f -I -H "Authorization: token $GH_PAT" https://api.github.com | { grep -i '^x-oauth-scopes:' || true; } | cut -d ' ' -f2- | tr -d '\r'); then
              failed=true
              if [ $unknown_format ]; then
                echo "::error::Unable to connect to GitHub using the GH_PAT secret. Verify that it is set correctly (including the 'ghp_' or 'github_pat_' prefix) and try again."
              else
                echo "::error::Unable to connect to GitHub using the GH_PAT secret. Verify that the token exists and has not expired at https://github.com/settings/tokens. If necessary, regenerate or create a new token (and update the secret), then try again."
              fi
            elif [[ $scopes =~ workflow ]]; then
              echo "The GH_PAT secret has repo and workflow permissions."
              echo "has_workflow_permission=true" >> $GITHUB_OUTPUT
            elif [[ $scopes =~ repo ]]; then
              echo "The GH_PAT secret has repo (but not workflow) permissions."
            elif [ $provides_scopes ]; then
              failed=true
              if [ -z "$scopes" ]; then
                echo "The GH_PAT secret is valid and can be used to connect to GitHub, but it does not provide any permission scopes."
              else
                echo "The GH_PAT secret is valid and can be used to connect to GitHub, but it only provides the following permission scopes: $scopes"
              fi
              echo "::error::The GH_PAT secret is lacking at least the 'repo' permission scope required to access the Match-Secrets repository. Update the token permissions at https://github.com/settings/tokens (to include the 'repo' and 'workflow' scopes) and try again."
            else
              echo "The GH_PAT secret is valid and can be used to connect to GitHub, but it does not provide inspectable scopes. Assuming that the 'repo' and 'workflow' permission scopes required to access the Match-Secrets repository and perform automations are present."
              echo "has_workflow_permission=true" >> $GITHUB_OUTPUT
            fi
          fi

          # Exit unsuccessfully if secret validation failed.
          if [ $failed ]; then
            exit 2
          fi

  validate-fastlane-secrets:
    name: Fastlane
    needs: [validate-access-token]
    runs-on: macos-14
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
      GH_TOKEN: ${{ secrets.GH_PAT }}
      FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
      FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
      FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      TEAMID: ${{ secrets.TEAMID }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Uninstall any existing Bundler versions
      - name: Uninstall existing Bundler
        run: gem uninstall bundler -a -x || true
  
      # Install Bundler 2.4.19
      - name: Install Bundler 2.4.19
        run: gem install bundler -v 2.4.19
  
      # Verify Bundler version
      - name: Verify Bundler version
        run: bundler -v
  
      # Remove Gemfile.lock if necessary
      - name: Remove Gemfile.lock if exists
        run: |
          if [ -f Gemfile.lock ]; then
            echo "Removing existing Gemfile.lock"
            rm Gemfile.lock
          else
            echo "No Gemfile.lock to remove"
          fi
  
      # Install project dependencies using Bundler 2.4.19
      - name: Install Project Dependencies
        run: bundle _2.4.19_ install

      # Validate Fastlane Secrets
      - name: Validate Fastlane Secrets
        run: bundle exec fastlane validate_secrets
