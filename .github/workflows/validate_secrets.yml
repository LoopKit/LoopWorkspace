name: 1. Validate Secrets
run-name: Validate Secrets (${{ github.ref_name }})
on: [workflow_call, workflow_dispatch]

jobs:
  validate-access-token:
    name: Access
    runs-on: macos-13
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
      GH_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Validate Access Token
        run: |
          # Validate Fastlane Access Token (GH_PAT)
          if [ -z "$GH_PAT" ]; then
            failed=true
            echo "::error::The GH_PAT secret is unset or empty. Set it and try again."
          elif [ "$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository_owner }}/LoopWorkspace | jq --raw-output '.permissions.push')" != "true" ]; then
            failed=true
            echo "::error::The GH_PAT secret is set but invalid or lacking at least 'repo' permission scope ('repo, workflow' is okay too).\
            Verify that token permissions are set correctly (or update them) at https://github.com/settings/tokens and try again."
          fi
          
          # Exit unsuccessfully if secret validation failed.
          if [ $failed ]; then
            exit 2
          fi
  
  validate-match-secrets:
    name: Match-Secrets
    needs: validate-access-token
    runs-on: macos-13
    env:
      GH_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Validate Match-Secrets
        run: |
          # Validate Match-Secrets
          if [ "$(gh repo list --json name | jq --raw-output 'any(.name=="Match-Secrets")')" != "true" ]; then
            echo "A 'Match-Secrets' repository could not be found. Attempting to create one...";
            
            if gh repo create Match-Secrets --private >/dev/null && [ "$(gh repo list --json name,visibility | jq --raw-output '.[] | select(.name=="Match-Secrets") | .visibility == "PRIVATE"')" == "true" ]; then
              echo "Created a private 'Match-Secrets' repository."
            else
              failed=true
              echo "::error::Cannot access or create a private 'Match-Secrets' repository. The GH_PAT secret is lacking at least the 'repo' permission scope required to access or create the repository.\
              Verify that token permissions are set correctly (or update them) at https://github.com/settings/tokens and try again."
            fi
          elif [ "$(gh repo list --json name,visibility | jq --raw-output '.[] | select(.name=="Match-Secrets") | .visibility == "PUBLIC"')" == "true" ]; then
            failed=true
            echo "::error::A 'Match-Secrets' repository was found, but it is is public. Delete it and try again (a private repository will be created for you)."
          fi
          
          # Exit unsuccessfully if secret validation failed.
          if [ $failed ]; then
            exit 2
          fi
  
  validate-fastlane-secrets:
    name: Fastlane
    needs: validate-match-secrets
    runs-on: macos-13
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
      GH_TOKEN: ${{ secrets.GH_PAT }}
      FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
      FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
      FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      TEAMID: ${{ secrets.TEAMID }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        
      - name: Validate Fastlane Secrets
        run: |
          # Validate Fastlane Secrets
          
          # Validate TEAMID
          if [ -z "$TEAMID" ]; then
            failed=true
            echo "::error::The TEAMID secret is unset or empty. Set it and try again."
          elif [ ${#TEAMID} -ne 10 ]; then
            failed=true
            echo "::error::The TEAMID secret is set but has wrong length. Verify that it is set correctly and try again."
          elif ! [[ $TEAMID =~ ^[A-Z0-9]+$ ]]; then
            failed=true
            echo "::error::The TEAMID secret is set but invalid. Verify that it is set correctly (only uppercase letters and numbers) and try again."
          fi
          
          # Validate MATCH_PASSWORD
          if [ -z "$MATCH_PASSWORD" ]; then
            failed=true
            echo "::error::The MATCH_PASSWORD secret is unset or empty. Set it and try again."
          fi
          
          # Ensure that fastlane exit codes are handled when output is piped.
          set -o pipefail
          
          # Validate FASTLANE_ISSUER_ID, FASTLANE_KEY_ID, and FASTLANE_KEY
          FASTLANE_KEY_ID_PATTERN='^[A-Z0-9]+$'
          FASTLANE_ISSUER_ID_PATTERN='^\{?[A-F0-9a-f]{8}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{12}\}?$'
          
          if [ -z "$FASTLANE_ISSUER_ID" ] || [ -z "$FASTLANE_KEY_ID" ] || [ -z "$FASTLANE_KEY" ]; then
            failed=true
            [ -z "$FASTLANE_ISSUER_ID" ] && echo "::error::The FASTLANE_ISSUER_ID secret is unset or empty. Set it and try again."
            [ -z "$FASTLANE_KEY_ID"    ] && echo "::error::The FASTLANE_KEY_ID secret is unset or empty. Set it and try again."
            [ -z "$FASTLANE_KEY"       ] && echo "::error::The FASTLANE_KEY secret is unset or empty. Set it and try again."
          elif [ ${#FASTLANE_KEY_ID} -ne 10 ]; then
            failed=true
            echo "::error::The FASTLANE_KEY_ID secret is set but has wrong length. Verify that you copied it correctly from the 'Keys' tab at https://appstoreconnect.apple.com/access/api and try again."
          elif ! [[ $FASTLANE_KEY_ID =~ $FASTLANE_KEY_ID_PATTERN ]]; then
            failed=true
            echo "::error::The FASTLANE_KEY_ID secret is set but invalid. Verify that you copied it correctly from the 'Keys' tab at https://appstoreconnect.apple.com/access/api and try again."
          elif ! [[ $FASTLANE_ISSUER_ID =~ $FASTLANE_ISSUER_ID_PATTERN ]]; then
            failed=true
            echo "::error::The FASTLANE_ISSUER_ID secret is set but invalid. Verify that you copied it correctly from the 'Keys' tab at https://appstoreconnect.apple.com/access/api and try again."
          elif ! echo "$FASTLANE_KEY" | openssl pkcs8 -nocrypt >/dev/null; then
            failed=true
            echo "::error::The FASTLANE_KEY secret is set but invalid. Verify that you copied it correctly from the API Key file (*.p8) you downloaded and try again."
          elif ! fastlane validate_secrets 2>&1 | tee fastlane.log; then
            if grep -q "bad decrypt" fastlane.log; then
              failed=true
              echo "::error::Unable to decrypt the Match-Secrets repository using the MATCH_PASSWORD secret. Verify that it is set correctly and try again."
            elif ! grep -q "No code signing identity found" fastlane.log; then
              failed=true
              echo "::error::Unable to create a valid authorization token for the App Store Connect API.\
              Verify that the FASTLANE_ISSUER_ID, FASTLANE_KEY_ID, and FASTLANE_KEY secrets are set correctly and try again."
            fi
          fi
          
          # Exit unsuccessfully if secret validation failed.
          if [ $failed ]; then
            exit 2
          fi
